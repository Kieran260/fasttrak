

enum DeliveryStatus {
    Pending = "Pending",
    Scheduled = "Scheduled",
    InProgress = "In Progress",
    Completed = "Completed",
    Cancelled = "Cancelled"
}

type DeliverySchedule = {
    schedule_id?: string;
    vehicle_id: string;
    vehicle: Vehicle; // Convert UUID to store Vehicle object
    store_id?: string;
    package_order: Package[];  // Convert array of UUIDs to array of Package objects
    delivery_date: Date;
    start_time: Date;
    status: DeliveryStatus;
    num_packages: number;
    estimated_duration_mins: number;
    actual_duration_mins: number;
    distance_miles: number;
    load_weight: number;
    load_volume: number;
    created_at: Date;
};

type Package = {
    package_id: string
    store_id: string
    tracking_id: string;
    recipient_name: string
    recipient_address: string
    recipient_phone: string
    sender_name: string
    sender_address: string
    sender_phone: string
    status: "Pending" | "In Transit" | "Delivered"
    weight: string
    volume: string
    fragile?: boolean
    priority: "Redelivery" | "Express" | "Standard" | "Return"
    delivery_notes: string
    date_added: Date
    date_modified: Date
    date_delivered: Date
    date_dispatched: Date
}


type Vehicle = {
    vehicle_id: string
    registration: string
    store_id: string
    manufacturer: string
    model: string
    manufacture_year: number
    status: "Available" | "Unavailable"
    max_load: number
    max_volume: number
}

// Mock data for vehicles
const vehiclesData: Vehicle[] = [
    {
        vehicle_id: '610e0d12-694f-11ee-8c99-0242ac120002',
        registration: 'ABC-123',
        store_id: 'store1',
        manufacturer: 'Tesla',
        model: 'Model X',
        manufacture_year: 2020,
        status: 'Available',
        max_load: 100,
        max_volume: 100,
    },
    {
        vehicle_id: '610e103c-694f-11ee-8c99-0242ac120003',
        registration: 'XYZ-789',
        store_id: 'store2',
        manufacturer: 'Ford',
        model: 'F-150',
        manufacture_year: 2019,
        status: 'Available',
        max_load: 200,
        max_volume: 200,
    },
    {
        vehicle_id: '610e103c-694f-11ee-8c99-0242ac120004',
        registration: 'LMN-456',
        store_id: 'store3',
        manufacturer: 'Toyota',
        model: 'Hilux',
        manufacture_year: 2018,
        status: 'Available',
        max_load: 300,
        max_volume: 300,
    },
];

// Mock data for packages
const packagesData: Package[] = [
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120005',
        store_id: '610e103c-694f-11ee-8c99-0242ac120002',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '20',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120006',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '20',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120007',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '20',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120008',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '50',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120009',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '25',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120010',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '150',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120011',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '110',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120012',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '100',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120013',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '30',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
    {
        package_id: '610e103c-694f-11ee-8c99-0242ac120014',
        store_id: '610e103c-694f-11ee-8c99-0242ac120004',
        tracking_id: 'T123',
        recipient_name: 'John Doe',
        recipient_address: '123 Main St',
        recipient_phone: '123-456-7890',
        sender_name: 'Jane Doe',
        sender_address: '456 Elm St',
        sender_phone: '987-654-3210',
        status: 'Pending',
        weight: '31',
        volume: '20',
        fragile: false,
        priority: 'Standard',
        delivery_notes: 'Leave at front door',
        date_added: new Date('2023-01-01'),
        date_modified: new Date(),
        date_delivered: new Date(),
        date_dispatched: new Date(),
    },
];

function SchedulePackages(vehiclesData: Vehicle[], packagesData: Package[]) {
    console.log("Scheduling packages...")
    // Initialize variables for tracking total volume and weight
    let totalVolume = 0;
    let totalWeight = 0;



    console.log("Packages fetched")


    // Sort packages in order of priority: Redelivery -> date_added >= 3 days -> Express -> Standard -> Return -> date_aded(newest)
    //packages.sort((a, b) => {
    //    const priorityOrder = ["Redelivery", "Express", "Standard", "Return"];
    //    const aPriority = priorityOrder.indexOf(a.priority);
    //    const bPriority = priorityOrder.indexOf(b.priority);

    //   if (aPriority !== bPriority) {
    //        return aPriority - bPriority;
    //    }

    // Check if date_added is greater than or equal to 3 days
    /*
    const aDaysOld = differenceInDays(new Date(), a.date_added);
    const bDaysOld = differenceInDays(new Date(), b.date_added);
    

    if (aDaysOld >= 3 && bDaysOld < 3) {
        return -1;
    }
    if (bDaysOld >= 3 && aDaysOld < 3) {
        return 1;
    }
    */

    // Sort by date_added if priorities and days old are the same
    //   console.log("Packages Sorted")
    //    return b.date_added.getTime() - a.date_added.getTime();
    //});


    // Initialize an empty array to hold delivery schedules for each vehicle
    let deliverySchedules: DeliverySchedule[] = [];

    console.log("iterating vehicles")
    // Iterate over each vehicle to create a delivery schedule
    for (const vehicle of vehicles) {
        let schedule: DeliverySchedule = {
            schedule_id: undefined,
            vehicle_id: vehicle.vehicle_id,
            vehicle: vehicle,
            store_id: undefined,
            package_order: [],  // Initialize as empty; will populate later
            delivery_date: new Date(),  // Placeholder for now, replace with date of schedule
            start_time: new Date(),  // Placeholder, replace with start date/time of first delivery
            status: DeliveryStatus.Pending,
            num_packages: 0,
            estimated_duration_mins: 0,
            actual_duration_mins: 0,
            distance_miles: 0,
            load_weight: 0,
            load_volume: 0,
            created_at: new Date()
        };

        // Add the schedule to the deliverySchedules array
        deliverySchedules.push(schedule);
    }
    // Initialize a variable to keep track of the current vehicle index for round-robin assignment
    let currentScheduleIndex = 0;

    // Sort vehicles by their current load_weight in ascending order
    deliverySchedules.sort((a, b) => a.load_weight - b.load_weight);

    for (const packageItem of packages) {
        const currentSchedule = deliverySchedules[currentScheduleIndex];


        // Remove undefined packages
        if (!packageItem) {
            console.log(`Package is undefined. Skipping.`);
            continue;
        }

        // Remove packages that wont fit from scheduling
        if (!findSuitableVehicle(packageItem, deliverySchedules)) {
            console.log("vehicle cannot be found for " + packageItem.package_id)
            continue;
        }

        totalVolume += parseInt(packageItem.volume);
        totalWeight += parseInt(packageItem.weight);

        if (currentSchedule) {
            const newLoadWeight = currentSchedule.load_weight + parseInt(packageItem.weight);
            const newLoadVolume = currentSchedule.load_volume + parseInt(packageItem.volume);

            if (newLoadWeight <= currentSchedule.vehicle.max_load && newLoadVolume <= currentSchedule.vehicle.max_load) {
                if (checkEstimatedTime(packageItem, currentSchedule, 8)) {
                    // Add package to schedule, remove from queue and update info
                    console.log("Adding package " + packageItem.package_id + " to schedule " + currentScheduleIndex)
                    currentSchedule.package_order.push(packageItem);
                    currentSchedule.num_packages += 1;
                    currentSchedule.load_weight = newLoadWeight;
                    currentSchedule.load_volume = newLoadVolume;
                    currentSchedule.estimated_duration_mins = calculateTotalTime(currentSchedule);
                } else {
                    // Try next schedule
                    console.log(packageItem.package_id + "xx")
                    findScheduleForPackage(packageItem, deliverySchedules);
                }
            } else {
                // Try next schedule
                findScheduleForPackage(packageItem, deliverySchedules);
            }
        }

        currentScheduleIndex = (currentScheduleIndex + 1) % vehicles.length;
    }



    // Output schedule info
    for (const schedule of deliverySchedules) {
        console.log("--------------------")
        console.log("Schedule: " + schedule.schedule_id);
        console.log(schedule.num_packages + " packages");
        console.log(schedule.load_weight + " kg of packages");
        console.log(schedule.vehicle.max_load + " kg max load");
        console.log(schedule.load_volume + " m3 of packages");
        console.log(schedule.vehicle.max_volume + " m3 max volume");
        console.log(schedule.estimated_duration_mins + " mins estimated time");
    }

    // Return the delivery schedules
    return deliverySchedules;
}



function checkEstimatedTime(packageToAdd: Package, schedule: DeliverySchedule | undefined, maxHours: number): boolean {
    if (!schedule) {
        return false;
    }

    const newSchedule: DeliverySchedule = {
        ...schedule,
        package_order: [...(schedule.package_order || []), packageToAdd],
    };

    const totalJourneyTime = calculateTotalTime(newSchedule);

    return (totalJourneyTime / 60) <= maxHours;
}




// Function to calculate the total time to deliver all packages in a route (DeliverySchedule)
function calculateTotalTime(schedule: DeliverySchedule): number {
    // Calculate the total time required for a route

    let time = 0;
    // for all packages in delivery schedule, calculate time from depot to package, ..., to depot and return total time
    for (let i = 0; i < schedule.num_packages; i++) {
        const packageItem = schedule.package_order[i];
        if (packageItem) {
            if (schedule.num_packages == 1) {
                // If and only if one package
                // Calculate time from depot to packageItem[i] and back to depot

                // calculateTravelTime(depot, packageItem[i])
                time += 1;

                // calculateTravelTime(packageItem[i], depot)
                time += 1;

                console.log(1)
            } else if (i === 0) {
                // If first package
                // Calculate time from depot to packageItem[i]

                // calculateTravelTime(depot, packageItem[i])
                time += 1;
                
                console.log(2)
            } else if (i === schedule.num_packages - 1) {
                // If last package
                // Calculate travel time from previous package to current package, and from current package (last package) back to depot

                // calculateTravelTime(packageItem[i-1], packageItem[i]])
                time += 1;

                // calculateTravelTime(packageItem[i], depot)
                time += 1;

                console.log(3)
            } else {
                // If package, but not first or last package
                // Calculate travel time of packageItem[i-1] to packageItem[i]
                
                // calculateTravelTime(packageItem[i], packageItem[i-1])
                time += 1;

                console.log(4)
            }
        }
    }

    return time;
}

function findSuitableVehicle(packageItem: Package, deliverySchedules: DeliverySchedule[]): boolean {
    for (const schedule of deliverySchedules) {
        if (schedule) {
            const newLoadWeight = schedule.load_weight + parseInt(packageItem.weight);
            const newLoadVolume = schedule.load_volume + parseInt(packageItem.volume);

            if (newLoadWeight <= schedule.vehicle.max_load && newLoadVolume <= schedule.vehicle.max_volume) {
                if (checkEstimatedTime(packageItem, schedule, 8)) {
                    return true;
                }
            }
        }
    }
    return false;
}

function findScheduleForPackage(packageItem: Package, deliverySchedules: DeliverySchedule[]): boolean {
    for (const schedule of deliverySchedules) {
        const newLoadWeight = schedule.load_weight + parseInt(packageItem.weight);
        const newLoadVolume = schedule.load_volume + parseInt(packageItem.volume);

        if (newLoadWeight <= schedule.vehicle.max_load && newLoadVolume <= schedule.vehicle.max_volume) {
            if (checkEstimatedTime(packageItem, schedule, 8)) {
                schedule.package_order.push(packageItem);
                schedule.num_packages += 1;
                schedule.load_weight = newLoadWeight;
                schedule.load_volume = newLoadVolume;
                schedule.estimated_duration_mins = calculateTotalTime(schedule);
                return true;
            } else {
                return false;
            }
        }

    }
    return false;
}

// Fetch available vehicles for Date that are not unavailable for maintenance
let vehicles: Vehicle[] = vehiclesData;

// Fetch packages that have status pending
let packages: Package[] = packagesData;

const returnedSchedules: DeliverySchedule[] = SchedulePackages(vehicles, packages);

for (let i = 0; i < returnedSchedules.length; i++) {
    console.log("[]------[]")
    console.log("package order length:" + returnedSchedules[i].package_order.length)
    console.log("num packages: " + returnedSchedules[i].num_packages)
    console.log("package order:")
    for (let j = 0; j < returnedSchedules[i].package_order.length; j++) {
        console.log(returnedSchedules[i].package_order[j].package_id)
    }
}



// types
